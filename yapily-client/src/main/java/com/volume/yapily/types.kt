package com.volume.yapily

import yapily.sdk.AccountIdentification
import java.util.*

interface YapilyAccountIdentification {
    fun toYapily(): AccountIdentification
    fun toDbString(): String
}

data class YapilyInstitutionId(val value: String) {
    init {
        // validate here
    }

    companion object {
        val MODELO_SANDBOX = "modelo-sandbox"
        fun modeloSandbox() : YapilyInstitutionId {
            return YapilyInstitutionId(MODELO_SANDBOX)
        }
    }
}


/**
 * TODO: find and describe how it works. This is a very important for us identifier.
 */
data class PaymentIdempotencyId(val value: String) {
    init {
        // validate here
    }

    companion object {
        fun random(): PaymentIdempotencyId {
            return PaymentIdempotencyId(UUID.randomUUID().toString().replace("-", ""))
        }
    }
}

/**
 * Assigned by Yapily when user is created using POST /users (https://docs.yapily.com/api/#create-user)
 */
data class YapilyUserId(val value: UUID) : java.io.Serializable {
    init {
        // validate here
    }
    companion object {
        fun random() : YapilyUserId {
            return YapilyUserId(UUID.randomUUID())
        }
    }
}

/**
 * From Yapily docs:
 *  here: https://docs.yapily.com/api/#tocS_NewApplicationUser
 *  description:
 *      Additional unique identifier that you can specify when creating a new User to more easily reference it.
 *
 *  It is either created by us and passed to POST /user or, if not provided, will be generated by Yapily.
 *  Yapily docs: https://docs.yapily.com/api/#create-user
 */
data class YapilyApplicationUserId(val value: String) : java.io.Serializable {
    init {
        // validate here
    }
    companion object {
        fun random() : YapilyApplicationUserId {
            return YapilyApplicationUserId(UUID.randomUUID().toString().replace("-", ""))
        }
    }
}

data class YapilyReferenceUserId(val value: UUID) : java.io.Serializable {
    init {
        // validate here
    }
    companion object {
        fun random() : YapilyReferenceUserId {
            return YapilyReferenceUserId(UUID.randomUUID())
        }
    }
}

/**
 * Unfortunately no detailed description exists in Yapily docs (https://docs.yapily.com/api/#tocS_PaymentAuthorisationRequestResponse)
 * I am guessing this may be a consent identifier issued by an institution (which would be very important for us.
 */
data class YapilyInstitutionConsentId(val value: String): java.io.Serializable {
    init {
        // validate here
    }
}

data class AccountIdentificationSortCode(val sortCode: String)
    : YapilyAccountIdentification {
    init {
        if (sortCode.length != 6) throw java.lang.IllegalArgumentException("Invalid sort code length ${sortCode.length}. It must be 6")
        try {
            sortCode.toInt()
        } catch (ex: java.lang.NumberFormatException) {
            throw java.lang.IllegalArgumentException("Invalid sort code format. It must be 6 digits long number")
        }
    }

    companion object {
        fun forTest() : AccountIdentificationSortCode {
            return AccountIdentificationSortCode("123456")
        }
    }

    override fun toYapily(): AccountIdentification {
        var result = AccountIdentification()
        result.type = AccountIdentification.TypeEnum.SORT_CODE
        result.identification = this.sortCode;
        return result;
    }

    override fun toDbString(): String {
        return "${AccountIdentification.TypeEnum.SORT_CODE}:$sortCode"
    }
}
data class AccountIdentificationAccountNumber(val accountNumber: String)
    : YapilyAccountIdentification {
    init {
        if (accountNumber.length != 8) throw java.lang.IllegalArgumentException("Invalid account number length ${accountNumber.length}. It must be 8")
        try {
            accountNumber.toInt()
        } catch (ex: java.lang.NumberFormatException) {
            throw java.lang.IllegalArgumentException("Invalid account number format. It must be 8 digits long number")
        }
    }

    companion object {
        fun forTest() : AccountIdentificationAccountNumber {
            return AccountIdentificationAccountNumber("12345678");
        }
    }

    override fun toYapily(): AccountIdentification {
        var result = AccountIdentification()
        result.type = AccountIdentification.TypeEnum.ACCOUNT_NUMBER
        result.identification = this.accountNumber;
        return result;
    }

    override fun toDbString(): String {
        return "${AccountIdentification.TypeEnum.ACCOUNT_NUMBER}:$accountNumber"
    }
}

/**
 * https://docs.yapily.com/guides/payments/payment-execution/#account-identifications-combinations
 */
class AccountIdentificationFactory {

    companion object {
        fun sortCode(value: String) : AccountIdentificationSortCode {
            return AccountIdentificationSortCode(value)
        }
        fun accountNumber(value: String) : AccountIdentificationAccountNumber {
            return AccountIdentificationAccountNumber(value)
        }
        fun fromDbString(dbString: String) : YapilyAccountIdentification {
            // TODO: handle edge cases. test
            val split = dbString.split(":")
            var type = AccountIdentification.TypeEnum.fromValue(split[0])
            var value = split[1]
            return when (type) {
                AccountIdentification.TypeEnum.SORT_CODE -> AccountIdentificationSortCode(value)
                AccountIdentification.TypeEnum.ACCOUNT_NUMBER -> AccountIdentificationAccountNumber(value)
                else -> throw java.lang.IllegalArgumentException("Unsupported AccountIdentification type ${type}")
            }
        }
    }
}